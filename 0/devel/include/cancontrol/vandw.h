// Generated by gencpp from file cancontrol/vandw.msg
// DO NOT EDIT!


#ifndef CANCONTROL_MESSAGE_VANDW_H
#define CANCONTROL_MESSAGE_VANDW_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cancontrol
{
template <class ContainerAllocator>
struct vandw_
{
  typedef vandw_<ContainerAllocator> Type;

  vandw_()
    : v(0)
    , w(0)
    , dis_x(0)
    , dis_y(0)  {
    }
  vandw_(const ContainerAllocator& _alloc)
    : v(0)
    , w(0)
    , dis_x(0)
    , dis_y(0)  {
  (void)_alloc;
    }



   typedef int32_t _v_type;
  _v_type v;

   typedef int32_t _w_type;
  _w_type w;

   typedef int32_t _dis_x_type;
  _dis_x_type dis_x;

   typedef int32_t _dis_y_type;
  _dis_y_type dis_y;





  typedef boost::shared_ptr< ::cancontrol::vandw_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cancontrol::vandw_<ContainerAllocator> const> ConstPtr;

}; // struct vandw_

typedef ::cancontrol::vandw_<std::allocator<void> > vandw;

typedef boost::shared_ptr< ::cancontrol::vandw > vandwPtr;
typedef boost::shared_ptr< ::cancontrol::vandw const> vandwConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cancontrol::vandw_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cancontrol::vandw_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cancontrol::vandw_<ContainerAllocator1> & lhs, const ::cancontrol::vandw_<ContainerAllocator2> & rhs)
{
  return lhs.v == rhs.v &&
    lhs.w == rhs.w &&
    lhs.dis_x == rhs.dis_x &&
    lhs.dis_y == rhs.dis_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cancontrol::vandw_<ContainerAllocator1> & lhs, const ::cancontrol::vandw_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cancontrol

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cancontrol::vandw_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cancontrol::vandw_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cancontrol::vandw_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cancontrol::vandw_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cancontrol::vandw_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cancontrol::vandw_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cancontrol::vandw_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d7fadd1e689290e03c5298e42f0e94d6";
  }

  static const char* value(const ::cancontrol::vandw_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd7fadd1e689290e0ULL;
  static const uint64_t static_value2 = 0x3c5298e42f0e94d6ULL;
};

template<class ContainerAllocator>
struct DataType< ::cancontrol::vandw_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cancontrol/vandw";
  }

  static const char* value(const ::cancontrol::vandw_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cancontrol::vandw_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 v\n"
"int32 w\n"
"int32 dis_x\n"
"int32 dis_y\n"
;
  }

  static const char* value(const ::cancontrol::vandw_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cancontrol::vandw_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.v);
      stream.next(m.w);
      stream.next(m.dis_x);
      stream.next(m.dis_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct vandw_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cancontrol::vandw_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cancontrol::vandw_<ContainerAllocator>& v)
  {
    s << indent << "v: ";
    Printer<int32_t>::stream(s, indent + "  ", v.v);
    s << indent << "w: ";
    Printer<int32_t>::stream(s, indent + "  ", v.w);
    s << indent << "dis_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dis_x);
    s << indent << "dis_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dis_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CANCONTROL_MESSAGE_VANDW_H
